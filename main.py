import streamlit as st
from google import genai
from google.genai import types
import os
import uuid
from datetime import datetime
from pymongo import MongoClient
import tempfile
import PyPDF2
import docx
import re

# Configura√ß√£o da p√°gina
st.set_page_config(page_title="Gerador de Propostas para Editais", page_icon="üöÄ", layout="wide")

# T√≠tulo do aplicativo
st.title("üöÄ Gerador de Propostas para Editais de Solu√ß√£o Inovadora")
st.markdown("Encontre editais alinhados com sua solu√ß√£o OU gere uma proposta completa para um edital espec√≠fico")

# Configura√ß√£o do Gemini API
gemini_api_key = st.secrets.get("GEMINI_API_KEY", os.getenv("GEMINI_API_KEY"))
if not gemini_api_key:
    gemini_api_key = st.text_input("Digite sua API Key do Gemini:", type="password")

if gemini_api_key:
    client = genai.Client(api_key=gemini_api_key)
    
    # Conex√£o com MongoDB (opcional)
    try:
        mongodb_uri = st.secrets.get("MONGODB_URI", os.getenv("MONGODB_URI"))
        if mongodb_uri:
            client_mongo = MongoClient(mongodb_uri)
            db = client_mongo['propostas_editais']
            collection = db['propostas_geradas']
            mongo_connected = True
        else:
            mongo_connected = False
    except:
        mongo_connected = False
        st.warning("Conex√£o com MongoDB n√£o configurada. As propostas n√£o ser√£o salvas.")

    # Fun√ß√£o para extrair texto de arquivos
    def extract_text_from_file(uploaded_file):
        text = ""
        file_type = uploaded_file.type
        
        if file_type == "application/pdf":
            # Processar PDF
            with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmp_file:
                tmp_file.write(uploaded_file.getvalue())
                tmp_file_path = tmp_file.name
            
            try:
                with open(tmp_file_path, "rb") as file:
                    pdf_reader = PyPDF2.PdfReader(file)
                    for page in pdf_reader.pages:
                        text += page.extract_text() + "\n"
            except Exception as e:
                st.error(f"Erro ao ler PDF: {e}")
            finally:
                os.unlink(tmp_file_path)
                
        elif file_type == "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
            # Processar DOCX
            with tempfile.NamedTemporaryFile(delete=False, suffix=".docx") as tmp_file:
                tmp_file.write(uploaded_file.getvalue())
                tmp_file_path = tmp_file.name
            
            try:
                doc = docx.Document(tmp_file_path)
                for paragraph in doc.paragraphs:
                    text += paragraph.text + "\n"
            except Exception as e:
                st.error(f"Erro ao ler DOCX: {e}")
            finally:
                os.unlink(tmp_file_path)
                
        else:
            # Processar texto simples
            text = str(uploaded_file.getvalue(), "utf-8")
        
        return text

    # Fun√ß√£o para buscar editais usando Web Search
    def buscar_editais_com_web_search(descricao_solucao, palavras_chave, area_atuacao, inovacao):
        # Configurar a ferramenta de busca do Google
        grounding_tool = types.Tool(
            google_search=types.GoogleSearch()
        )
        
        config = types.GenerateContentConfig(
            tools=[grounding_tool],
            temperature=0.3
        )
        
        prompt = f'''
        Com base na seguinte solu√ß√£o inovadora, busque informa√ß√µes sobre editais ativos ou recentes que sejam adequados para esta proposta:

        DESCRI√á√ÉO DA SOLU√á√ÉO: {descricao_solucao}
        √ÅREA DE ATUA√á√ÉO: {area_atuacao}
        ELEMENTOS INOVADORES: {inovacao}
        PALAVRAS-CHAVE: {palavras_chave}

        Forne√ßa informa√ß√µes sobre:
        1. Editais ativos ou recentes que se alinhem com esta solu√ß√£o
        2. √ìrg√£os/governos/institui√ß√µes que financiam este tipo de solu√ß√£o
        3. Prazos e requisitos importantes
        4. Links e fontes para mais informa√ß√µes

        Seja espec√≠fico e pr√°tico, fornecendo informa√ß√µes atualizadas e relevantes.
        '''
        
        try:
            response = client.models.generate_content(
                model="gemini-2.0-flash",
                contents=prompt,
                config=config
            )
            
            # Extrair metadados de fundamenta√ß√£o se dispon√≠veis
            resultado = response.text
            
            if hasattr(response, 'candidates') and response.candidates:
                candidate = response.candidates[0]
                if hasattr(candidate, 'grounding_metadata'):
                    # Adicionar informa√ß√µes sobre as fontes
                    resultado += "\n\n---\n**FONTES E REFER√äNCIAS:**\n"
                    if hasattr(candidate.grounding_metadata, 'grounding_chunks'):
                        for i, chunk in enumerate(candidate.grounding_metadata.grounding_chunks[:5]):
                            if hasattr(chunk, 'web') and hasattr(chunk.web, 'uri'):
                                resultado += f"\n{i+1}. {chunk.web.uri}"
            
            return resultado
            
        except Exception as e:
            return f"Erro na busca: {str(e)}"

    # Fun√ß√£o para salvar no MongoDB
    def salvar_no_mongo(titulo, area_atuacao, palavras_chave, texto_edital, todas_etapas):
        if mongo_connected:
            documento = {
                "id": str(uuid.uuid4()),
                "titulo": titulo,
                "area_atuacao": area_atuacao,
                "palavras_chave": palavras_chave,
                "texto_edital": texto_edital[:1000] + "..." if len(texto_edital) > 1000 else texto_edital,
                "proposta_completa": todas_etapas,
                "data_criacao": datetime.now()
            }
            collection.insert_one(documento)
            return True
        return False

    # Fun√ß√µes para cada etapa da proposta
    def gerar_titulo_resumo(texto_edital, palavras_chave, diretrizes, area_atuacao, descricao_solucao):
        prompt = f'''
        Com base no edital fornecido e na solu√ß√£o do usu√°rio, gere um T√çTULO CRIATIVO e um RESUMO EXECUTIVO para uma proposta.

        TEXTO DO EDITAL:
        {texto_edital[:3000]}

        SOLU√á√ÉO DO USU√ÅRIO:
        {descricao_solucao}

        PALAVRAS-CHAVE: {palavras_chave}
        DIRETRIZES: {diretrizes}
        √ÅREA DE ATUA√á√ÉO: {area_atuacao}

        ESTRUTURE SUA RESPOSTA COM:
        T√çTULO: [T√≠tulo criativo e alinhado ao edital e √† solu√ß√£o]
        RESUMO EXECUTIVO: [Resumo de at√© 150 palavras explicando a solu√ß√£o proposta, seu diferencial inovador e benef√≠cios esperados]
        '''
        
        response = client.models.generate_content(
            model="gemini-1.5-flash",
            contents=prompt
        )
        return response.text

    def gerar_justificativa(texto_edital, palavras_chave, titulo_resumo, descricao_solucao, inovacao):
        prompt = f'''
        Com base no edital, no t√≠tulo/resumo fornecidos e na solu√ß√£o do usu√°rio, elabore uma JUSTIFICATIVA detalhada.

        TEXTO DO EDITAL:
        {texto_edital[:3000]}

        SOLU√á√ÉO DO USU√ÅRIO:
        {descricao_solucao}

        ELEMENTOS INOVADORES: {inovacao}
        PALAVRAS-CHAVE: {palavras_chave}
        T√çTULO E RESUMO DA PROPOSTA: {titulo_resumo}

        Forne√ßa uma justificativa t√©cnica convincente que destaque:
        1. O problema a ser resolvido e sua relev√¢ncia
        2. Por que a solu√ß√£o proposta √© inovadora
        3. Diferenciais em rela√ß√£o a solu√ß√µes existentes
        4. Alinhamento com as prioridades do edital
        '''
        
        response = client.models.generate_content(
            model="gemini-1.5-flash",
            contents=prompt
        )
        return response.text

    def gerar_objetivos_metodologia(texto_edital, palavras_chave, conteudo_anterior, descricao_solucao):
        prompt = f'''
        Com base no edital, no conte√∫do j√° desenvolvido e na solu√ß√£o do usu√°rio, elabore os OBJETIVOS e a METODOLOGIA.

        TEXTO DO EDITAL:
        {texto_edital[:3000]}

        SOLU√á√ÉO DO USU√ÅRIO:
        {descricao_solucao}

        PALAVRAS-CHAVE: {palavras_chave}
        CONTE√öDO J√Å DESENVOLVIDO: {conteudo_anterior}

        OBJETIVOS:
        - Objetivo geral [1 objetivo principal]
        - Objetivos espec√≠ficos [3-5 objetivos mensur√°veis]

        METODOLOGIA:
        - Descri√ß√£o detalhada da solu√ß√£o proposta
        - M√©todos, t√©cnicas e abordagens
        - Fluxo de desenvolvimento e implementa√ß√£o
        '''
        
        response = client.models.generate_content(
            model="gemini-1.5-flash",
            contents=prompt
        )
        return response.text

    def gerar_cronograma(texto_edital, palavras_chave, conteudo_anterior):
        prompt = f'''
        Com base no edital e no conte√∫do j√° desenvolvido, elabore um CRONOGRAMA DE IMPLEMENTA√á√ÉO detalhado.

        TEXTO DO EDITAL:
        {texto_edital[:3000]}

        PALAVRAS-CHAVE: {palavras_chave}
        CONTE√öDO J√Å DESENVOLVIDO: {conteudo_anterior}

        ESTRUTURE O CRONOGRAMA EM FASES:
        1. Pr√©-implanta√ß√£o (prepara√ß√£o, planejamento)
        2. Implanta√ß√£o (desenvolvimento, execu√ß√£o)
        3. P√≥s-implanta√ß√£o (testes, ajustes, opera√ß√£o)

        Para cada fase, inclua:
        - Atividades principais
        - Marcos e entreg√°veis
        - Dura√ß√£o estimada (semanas/meses)
        '''
        
        response = client.models.generate_content(
            model="gemini-1.5-flash",
            contents=prompt
        )
        return response.text

    def gerar_plano_negocios(texto_edital, palavras_chave, conteudo_anterior, descricao_solucao):
        prompt = f'''
        Com base no edital, no conte√∫do j√° desenvolvido e na solu√ß√£o do usu√°rio, elabore um PLANO DE NEG√ìCIOS.

        TEXTO DO EDITAL:
        {texto_edital[:3000]}

        SOLU√á√ÉO DO USU√ÅRIO:
        {descricao_solucao}

        PALAVRAS-CHAVE: {palavras_chave}
        CONTE√öDO J√Å DESENVOLVIDO: {conteudo_anterior}

        ESTRUTURE O PLANO DE NEG√ìCIOS COM:
        1. Modelo de neg√≥cio proposto
        2. An√°lise de mercado e concorr√™ncia
        3. Proje√ß√£o financeira (investimento, custos, receitas)
        4. Estrat√©gia de sustentabilidade
        '''
        
        response = client.models.generate_content(
            model="gemini-1.5-flash",
            contents=prompt
        )
        return response.text

    def gerar_recursos_impactos(texto_edital, palavras_chave, conteudo_anterior, descricao_solucao):
        prompt = f'''
        Com base no edital, no conte√∫do j√° desenvolvido e na solu√ß√£o do usu√°rio, elabore a se√ß√£o de RECURSOS NECESS√ÅRIOS e IMPACTOS ESPERADOS.

        TEXTO DO EDITAL:
        {texto_edital[:3000]}

        SOLU√á√ÉO DO USU√ÅRIO:
        {descricao_solucao}

        PALAVRAS-CHAVE: {palavras_chave}
        CONTE√öDO J√Å DESENVOLVIDO: {conteudo_anterior}

        RECURSOS NECESS√ÅRIOS:
        - Recursos humanos (equipe, compet√™ncias)
        - Infraestrutura e equipamentos
        - Tecnologias e ferramentas
        - Parcerias estrat√©gicas

        IMPACTOS ESPERADOS:
        - Impactos t√©cnicos, econ√¥micos e sociais
        - Benef√≠cios para os stakeholders
        - Potencial de escalabilidade e replicabilidade
        '''
        
        response = client.models.generate_content(
            model="gemini-1.5-flash",
            contents=prompt
        )
        return response.text

    def gerar_conclusao(texto_edital, palavras_chave, conteudo_anterior, descricao_solucao):
        prompt = f'''
        Com base no edital, no conte√∫do j√° desenvolvido e na solu√ß√£o do usu√°rio, elabore uma CONCLUS√ÉO persuasiva.

        TEXTO DO EDITAL:
        {texto_edital[:3000]}

        SOLU√á√ÉO DO USU√ÅRIO:
        {descricao_solucao}

        PALAVRAS-CHAVE: {palavras_chave}
        CONTE√öDO J√Å DESENVOLVIDO: {conteudo_anterior}

        A conclus√£o deve:
        - Sintetizar os pontos principais da proposta
        - Reafirmar o potencial de sucesso e inova√ß√£o
        - Destacar os benef√≠cios e impactos esperados
        - Finalizar com uma chamada para a√ß√£o convincente
        '''
        
        response = client.models.generate_content(
            model="gemini-1.5-flash",
            contents=prompt
        )
        return response.text

    # Abas separadas para cada funcionalidade
    tab1, tab2 = st.tabs(["üîç Buscar Editais", "üìù Gerar Proposta"])

    with tab1:
        st.header("üîç Buscar Editais Alinhados")
        st.markdown("Descreva sua solu√ß√£o para encontrar editais que sejam adequados")
        
        with st.form("form_busca_editais"):
            col1, col2 = st.columns(2)
            
            with col1:
                nome_solucao = st.text_input("Nome da Solu√ß√£o:", placeholder="Ex: Sistema IoT de Monitoramento Agr√≠cola")
                area_solucao = st.selectbox("√Årea de Aplica√ß√£o:", [
                    "Agricultura", "Sa√∫de", "Educa√ß√£o", "Energia", "Meio Ambiente", 
                    "Mobilidade", "Ind√∫stria", "Tecnologia", "Outra"
                ])
                problema_resolve = st.text_area("Problema que Resolve:", placeholder="Descreva o problema que sua solu√ß√£o aborda")
            
            with col2:
                como_funciona = st.text_area("Como Funciona:", placeholder="Explique brevemente como sua solu√ß√£o funciona")
                inovacao_solucao = st.text_area("O que tem de Inovador:", placeholder="Descreva os aspectos inovadores")
                beneficios = st.text_area("Benef√≠cios e Impactos:", placeholder="Quais benef√≠cios e impactos sua solu√ß√£o traz")
            
            palavras_chave_busca = st.text_input("Palavras-chave para busca:", "inova√ß√£o, tecnologia, sustentabilidade")
            
            submitted_busca = st.form_submit_button("üîç Buscar Editais", type="primary")
        
        if submitted_busca and gemini_api_key:
            with st.spinner("Buscando editais alinhados com sua solu√ß√£o..."):
                descricao_completa = f"""
                Busque editais recentes e em aberto no ano de 2025
                NOME: {nome_solucao}
                √ÅREA: {area_solucao}
                PROBLEMA RESOLVIDO: {problema_resolve}
                COMO FUNCIONA: {como_funciona}
                INOVA√á√ÉO: {inovacao_solucao}
                BENEF√çCIOS: {beneficios}
                """
                
                resultado_busca = buscar_editais_com_web_search(
                    descricao_completa, 
                    palavras_chave_busca, 
                    area_solucao, 
                    inovacao_solucao
                )
                
                st.success("‚úÖ Busca de editais conclu√≠da!")
                st.subheader("üìã Editais Encontrados")
                st.markdown(resultado_busca)

    with tab2:
        st.header("üìù Gerar Proposta para Edital")
        st.markdown("Fa√ßa upload de um edital espec√≠fico para gerar uma proposta completa")
        
        with st.form("form_gerar_proposta"):
            # Upload do edital
            uploaded_file = st.file_uploader("Fa√ßa upload do edital (PDF, DOCX ou TXT):", 
                                            type=["pdf", "docx", "txt"])
            
            area_atuacao = st.selectbox("√Årea de Atua√ß√£o Principal:", [
                "Tecnologia da Informa√ß√£o", "Sa√∫de", "Educa√ß√£o", "Agroneg√≥cio", 
                "Energia", "Meio Ambiente", "Mobilidade Urbana", "Ind√∫stria 4.0",
                "Seguran√ßa", "Turismo", "Outra"
            ])
            
            if area_atuacao == "Outra":
                area_atuacao = st.text_input("Especifique a √°rea de atua√ß√£o:")
            
            palavras_chave = st.text_area("Palavras-chave (separadas por v√≠rgula):", 
                                         "inova√ß√£o, tecnologia, sustentabilidade, efici√™ncia")
            
            diretrizes_usuario = st.text_area("Diretrizes ou Ideias Preliminares:", 
                                             "Ex: Focar em solu√ß√µes de IoT para monitoramento remoto. Incluir parceria com universidades. Considerar baixo custo de implementa√ß√£o.")
            
            # Op√ß√£o para inserir texto manualmente
            texto_manual = st.text_area("Ou cole o texto do edital manualmente:", height=200)
            
            submitted_proposta = st.form_submit_button("üöÄ Gerar Proposta Completa", type="primary")
        
        if submitted_proposta and gemini_api_key:
            # Obter texto do edital
            texto_edital = ""
            
            if uploaded_file is not None:
                with st.spinner("Processando arquivo do edital..."):
                    texto_edital = extract_text_from_file(uploaded_file)
                    if not texto_edital.strip():
                        st.error("N√£o foi poss√≠vel extrair texto do arquivo. Tente outro formato ou use a op√ß√£o de texto manual.")
                        st.stop()
            elif texto_manual.strip():
                texto_edital = texto_manual
            else:
                st.error("Por favor, fa√ßa upload de um edital ou cole o texto manualmente.")
                st.stop()
            
            # Gerar proposta em etapas
            todas_etapas = {}
            
            with st.status("Gerando proposta passo a passo...", expanded=True) as status:
                # Preparar descri√ß√£o da solu√ß√£o do usu√°rio (simplificada para esta aba)
                descricao_solucao = "Solu√ß√£o customizada baseada nas diretrizes do usu√°rio"
                
                # Etapa 1: T√≠tulo e Resumo
                st.write("üéØ Gerando t√≠tulo e resumo executivo...")
                titulo_resumo = gerar_titulo_resumo(texto_edital, palavras_chave, diretrizes_usuario, area_atuacao, descricao_solucao)
                todas_etapas['titulo_resumo'] = titulo_resumo
                
                # Extrair t√≠tulo para usar no nome do documento
                titulo_match = re.search(r'T√çTULO:\s*(.+)', titulo_resumo, re.IGNORECASE)
                titulo_proposta = titulo_match.group(1).strip() if titulo_match else f"Proposta para Edital de Inova√ß√£o em {area_atuacao}"
                
                # Etapa 2: Justificativa
                st.write("üìù Desenvolvendo justificativa e inova√ß√£o...")
                justificativa = gerar_justificativa(texto_edital, palavras_chave, titulo_resumo, descricao_solucao, "Inova√ß√£o baseada nas diretrizes fornecidas")
                todas_etapas['justificativa'] = justificativa
                
                # Etapa 3: Objetivos e Metodologia
                st.write("üéØ Definindo objetivos e metodologia...")
                conteudo_anterior = f"{titulo_resumo}\n\n{justificativa}"
                objetivos_metodologia = gerar_objetivos_metodologia(texto_edital, palavras_chave, conteudo_anterior, descricao_solucao)
                todas_etapas['objetivos_metodologia'] = objetivos_metodologia
                
                # Etapa 4: Cronograma
                st.write("üìÖ Elaborando cronograma de implementa√ß√£o...")
                conteudo_anterior = f"{conteudo_anterior}\n\n{objetivos_metodologia}"
                cronograma = gerar_cronograma(texto_edital, palavras_chave, conteudo_anterior)
                todas_etapas['cronograma'] = cronograma
                
                # Etapa 5: Plano de Neg√≥cios
                st.write("üíº Desenvolvendo plano de neg√≥cios...")
                conteudo_anterior = f"{conteudo_anterior}\n\n{cronograma}"
                plano_negocios = gerar_plano_negocios(texto_edital, palavras_chave, conteudo_anterior, descricao_solucao)
                todas_etapas['plano_negocios'] = plano_negocios
                
                # Etapa 6: Recursos e Impactos
                st.write("üõ†Ô∏è Especificando recursos necess√°rios e impactos...")
                conteudo_anterior = f"{conteudo_anterior}\n\n{plano_negocios}"
                recursos_impactos = gerar_recursos_impactos(texto_edital, palavras_chave, conteudo_anterior, descricao_solucao)
                todas_etapas['recursos_impactos'] = recursos_impactos
                
                # Etapa 7: Conclus√£o
                st.write("üîö Finalizando com conclus√£o persuasiva...")
                conteudo_anterior = f"{conteudo_anterior}\n\n{recursos_impactos}"
                conclusao = gerar_conclusao(texto_edital, palavras_chave, conteudo_anterior, descricao_solucao)
                todas_etapas['conclusao'] = conclusao
                
                status.update(label="Proposta completa gerada!", state="complete")
            
            # Montar proposta completa
            proposta_completa = f"""
            {todas_etapas['titulo_resumo']}
            
            ## JUSTIFICATIVA E INOVA√á√ÉO
            {todas_etapas['justificativa']}
            
            ## OBJETIVOS E METODOLOGIA
            {todas_etapas['objetivos_metodologia']}
            
            ## CRONOGRAMA DE IMPLEMENTA√á√ÉO
            {todas_etapas['cronograma']}
            
            ## PLANO DE NEG√ìCIOS
            {todas_etapas['plano_negocios']}
            
            ## RECURSOS NECESS√ÅRIOS E IMPACTOS ESPERADOS
            {todas_etapas['recursos_impactos']}
            
            ## CONCLUS√ÉO
            {todas_etapas['conclusao']}
            """
            
            # Exibir resultados
            st.success("‚úÖ Proposta gerada com sucesso!")
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.subheader("üìä Metadados da Proposta")
                st.info(f"**T√≠tulo:** {titulo_proposta}")
                st.info(f"**√Årea de Atua√ß√£o:** {area_atuacao}")
                st.info(f"**Palavras-chave:** {palavras_chave}")
                
                # Bot√£o para copiar texto
                st.download_button(
                    label="üì• Download da Proposta",
                    data=proposta_completa,
                    file_name=f"proposta_edital_{titulo_proposta.lower().replace(' ', '_')[:30]}.txt",
                    mime="text/plain"
                )
            
            with col2:
                st.subheader("üéØ Diretrizes Aplicadas")
                st.success(f"**√Årea de Foco:** {area_atuacao}")
                st.success(f"**Palavras-chave:** {palavras_chave}")
                if diretrizes_usuario.strip():
                    st.success(f"**Diretrizes:** {diretrizes_usuario}")
            
            st.divider()
            
            # Abas para visualizar cada se√ß√£o
            tabs = st.tabs(["T√≠tulo e Resumo", "Justificativa", "Objetivos e Metodologia", 
                           "Cronograma", "Plano de Neg√≥cios", "Recursos e Impactos", "Conclus√£o", "Proposta Completa"])
            
            with tabs[0]:
                st.markdown(todas_etapas['titulo_resumo'])
            with tabs[1]:
                st.markdown(todas_etapas['justificativa'])
            with tabs[2]:
                st.markdown(todas_etapas['objetivos_metodologia'])
            with tabs[3]:
                st.markdown(todas_etapas['cronograma'])
            with tabs[4]:
                st.markdown(todas_etapas['plano_negocios'])
            with tabs[5]:
                st.markdown(todas_etapas['recursos_impactos'])
            with tabs[6]:
                st.markdown(todas_etapas['conclusao'])
            with tabs[7]:
                st.markdown(proposta_completa)
            
            # Salvar no MongoDB se conectado
            if mongo_connected:
                if salvar_no_mongo(titulo_proposta, area_atuacao, palavras_chave, texto_edital, todas_etapas):
                    st.sidebar.success("‚úÖ Proposta salva no banco de dados!")

elif not gemini_api_key:
    st.warning("‚ö†Ô∏è Por favor, insira uma API Key v√°lida do Gemini para gerar propostas.")

else:
    st.info("üîë Para come√ßar, insira sua API Key do Gemini na barra lateral.")

# Rodap√©
st.divider()
st.caption("üöÄ Gerador de Propostas para Editais - Desenvolvido para transformar ideias inovadoras em projetos concretos")
