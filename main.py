import streamlit as st
from google import genai
from google.genai import types
import os
import uuid
from datetime import datetime
from pymongo import MongoClient
import tempfile
import PyPDF2
import docx
import re

# Configura√ß√£o da p√°gina
st.set_page_config(page_title="Gerador de Propostas para Editais", page_icon="üöÄ", layout="wide")

# T√≠tulo do aplicativo
st.title("üöÄ Gerador de Propostas para Editais de Inova√ß√£o")
st.markdown("Encontre editais abertos e gere propostas completas no formato oficial")

# Configura√ß√£o do Gemini API
gemini_api_key = st.secrets.get("GEMINI_API_KEY", os.getenv("GEMINI_API_KEY"))
if not gemini_api_key:
    gemini_api_key = st.text_input("Digite sua API Key do Gemini:", type="password")

if gemini_api_key:
    client = genai.Client(api_key=gemini_api_key)
    
    # Conex√£o com MongoDB (opcional)
    try:
        mongodb_uri = st.secrets.get("MONGODB_URI", os.getenv("MONGODB_URI"))
        if mongodb_uri:
            client_mongo = MongoClient(mongodb_uri)
            db = client_mongo['propostas_editais']
            collection = db['propostas_geradas']
            mongo_connected = True
        else:
            mongo_connected = False
    except:
        mongo_connected = False

    # Fun√ß√£o para buscar editais abertos com Web Search
    def buscar_editais_abertos_web(palavras_chave, area_interesse, tipo_edital):
        grounding_tool = types.Tool(
            google_search=types.GoogleSearch()
        )
        
        config = types.GenerateContentConfig(
            tools=[grounding_tool],
            temperature=0.3
        )
        
        prompt = f'''
        Busque por EDITAIS ABERTOS E ATIVOS em todo o mundo para projetos de inova√ß√£o, tecnologia e P&D.
        
        PALAVRAS-CHAVE: {palavras_chave}
        √ÅREA DE INTERESSE: {area_interesse}
        TIPO DE EDITAL: {tipo_edital}
        
        Foque em encontrar editais ativos de:
        - Empresas de energia e utilities
        - √ìrg√£os governamentais
        - Funda√ß√µes de pesquisa
        - Programas de inova√ß√£o
        - Ag√™ncias de fomento
        - Empresas de tecnologia
        - Startups e venture capital
        
        Forne√ßa informa√ß√µes detalhadas sobre:
        - Nome completo do edital
        - Organiza√ß√£o respons√°vel
        - Prazo de submiss√£o (especificar se est√° aberto)
        - Valor dispon√≠vel ou faixa de financiamento
        - Link oficial para mais informa√ß√µes
        - √Åreas tem√°ticas cobertas
        - Requisitos de elegibilidade
        - Contatos importantes
        
        Priorize editais com prazos em aberto e forne√ßa informa√ß√µes atualizadas.
        '''
        
        try:
            response = client.models.generate_content(
                model="gemini-2.5-flash",
                contents=prompt,
                config=config
            )
            
            resultado = response.text
            
            # Adicionar informa√ß√µes das fontes se dispon√≠veis
            if hasattr(response, 'candidates') and response.candidates:
                candidate = response.candidates[0]
                if hasattr(candidate, 'grounding_metadata'):
                    resultado += "\n\n---\n**FONTES E REFER√äNCIAS:**\n"
                    if hasattr(candidate.grounding_metadata, 'grounding_chunks'):
                        for i, chunk in enumerate(candidate.grounding_metadata.grounding_chunks[:5]):
                            if hasattr(chunk, 'web') and hasattr(chunk.web, 'uri'):
                                resultado += f"\n{i+1}. {chunk.web.uri}"
            
            return resultado
            
        except Exception as e:
            return f"Erro na busca: {str(e)}"

    # Fun√ß√£o para extrair texto de arquivos
    def extract_text_from_file(uploaded_file):
        text = ""
        file_type = uploaded_file.type
        
        if file_type == "application/pdf":
            with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmp_file:
                tmp_file.write(uploaded_file.getvalue())
                tmp_file_path = tmp_file.name
            
            try:
                with open(tmp_file_path, "rb") as file:
                    pdf_reader = PyPDF2.PdfReader(file)
                    for page in pdf_reader.pages:
                        text += page.extract_text() + "\n"
            except Exception as e:
                st.error(f"Erro ao ler PDF: {e}")
            finally:
                os.unlink(tmp_file_path)
                
        elif file_type == "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
            with tempfile.NamedTemporaryFile(delete=False, suffix=".docx") as tmp_file:
                tmp_file.write(uploaded_file.getvalue())
                tmp_file_path = tmp_file.name
            
            try:
                doc = docx.Document(tmp_file_path)
                for paragraph in doc.paragraphs:
                    text += paragraph.text + "\n"
            except Exception as e:
                st.error(f"Erro ao ler DOCX: {e}")
            finally:
                os.unlink(tmp_file_path)
                
        else:
            text = str(uploaded_file.getvalue(), "utf-8")
        
        return text

    # Fun√ß√£o para buscar editais espec√≠ficos
    def buscar_editais_especificos(descricao_solucao, palavras_chave, area_atuacao, inovacao):
        grounding_tool = types.Tool(
            google_search=types.GoogleSearch()
        )
        
        config = types.GenerateContentConfig(
            tools=[grounding_tool],
            temperature=0.3
        )
        
        prompt = f'''
        Busque por EDITAIS ABERTOS adequados para esta solu√ß√£o espec√≠fica:

        DESCRI√á√ÉO DA SOLU√á√ÉO: {descricao_solucao}
        √ÅREA DE ATUA√á√ÉO: {area_atuacao}
        ELEMENTOS INOVADORES: {inovacao}
        PALAVRAS-CHAVE: {palavras_chave}

        Encontre editais ativos que se alinhem com esta solu√ß√£o.
        '''
        
        try:
            response = client.models.generate_content(
                model="gemini-2.5-flash",
                contents=prompt,
                config=config
            )
            return response.text
        except Exception as e:
            return f"Erro na busca: {str(e)}"

    # Fun√ß√£o para gerar proposta autom√°tica
    def gerar_proposta_automatica(desafio_edital):
        proposta_completa = {}
        
        # Analisar desafio e gerar solu√ß√£o
        prompt_analise = f'''
        ANALISE este desafio de edital e gere uma SOLU√á√ÉO INOVADORA completa:

        DESAFIO DO EDITAL:
        {desafio_edital}

        Gere uma solu√ß√£o tecnol√≥gica inovadora que inclua:
        1. Descri√ß√£o t√©cnica detalhada
        2. Elementos inovadores e diferenciais competitivos
        3. Tecnologias envolvidas (focar em IA, IoT, dados)
        4. Tipo de produto resultante
        5. Potencial de mercado e aplica√ß√£o

        Retorne no formato:
        DESCRICAO_SOLUCAO: [descri√ß√£o completa]
        INOVACAO: [aspectos inovadores]
        TECNOLOGIAS: [tecnologias utilizadas]
        TIPO_PRODUTO: [tipo de produto]
        POTENCIAL_MERCADO: [potencial de aplica√ß√£o]

        Seja preciso, t√©cnico e decidido no que ser√° desenvolvido.
        Foque em implementa√ß√µes pr√°ticas que envolvam tecnologias avan√ßadas.
        '''
        
        response = client.models.generate_content(
            model="gemini-2.5-flash",
            contents=prompt_analise
        )
        
        resposta_analise = response.text
        linhas = resposta_analise.split('\n')
        
        dados_solucao = {}
        for linha in linhas:
            if 'DESCRICAO_SOLUCAO:' in linha:
                dados_solucao['descricao_solucao'] = linha.split('DESCRICAO_SOLUCAO:')[1].strip()
            elif 'INOVACAO:' in linha:
                dados_solucao['aspectos_inovativos'] = linha.split('INOVACAO:')[1].strip()
            elif 'TECNOLOGIAS:' in linha:
                dados_solucao['tecnologias_previstas'] = linha.split('TECNOLOGIAS:')[1].strip()
            elif 'TIPO_PRODUTO:' in linha:
                dados_solucao['tipo_produto'] = linha.split('TIPO_PRODUTO:')[1].strip()
            elif 'POTENCIAL_MERCADO:' in linha:
                dados_solucao['potencial_mercado'] = linha.split('POTENCIAL_MERCADO:')[1].strip()
        
        if not dados_solucao.get('descricao_solucao'):
            dados_solucao['descricao_solucao'] = resposta_analise
        
        # Preencher dados padr√£o
        dados_solucao.update({
            'area_atuacao': "Tecnologia e Inova√ß√£o",
            'complexidade': "Alta",
            'tamanho_equipe': "8",
            'maturidade_tecnologica': "Prot√≥tipo Avan√ßado",
            'trl_inicial': "TRL4",
            'trl_final': "TRL7",
            'propriedade_intelectual': "Potencial para patente devido aos aspectos inovadores",
            'estado_desenvolvimento': "Conceito validado"
        })
        
        # Gerar cada item do formul√°rio
        prompt_titulo = f'''
        Crie um T√çTULO criativo e impactante (m√°x 200 caracteres):

        DESAFIO: {desafio_edital}
        SOLU√á√ÉO: {dados_solucao['descricao_solucao'][:500]}
        Retorne APENAS o t√≠tulo.
        '''
        response = client.models.generate_content(
            model="gemini-2.5-flash",
            contents=prompt_titulo
        )
        proposta_completa['titulo'] = response.text.strip()[:200]
        
        prompt_desafio = f'''
        Extraia informa√ß√µes do desafio:
        {desafio_edital}
        Retorne:
        C√ìDIGO: [c√≥digo ou EDITAL-2024-XXX]
        NOME: [nome resumido do desafio]
        '''
        response = client.models.generate_content(
            model="gemini-2.5-flash",
            contents=prompt_desafio
        )
        proposta_completa['desafio_info'] = response.text
        
        prompt_duracao = f'''
        Estime dura√ß√£o realista em MESES:
        DESAFIO: {desafio_edital[:300]}
        SOLU√á√ÉO: {dados_solucao['descricao_solucao'][:300]}
        Retorne APENAS o n√∫mero.
        '''
        response = client.models.generate_content(
            model="gemini-2.5-flash",
            contents=prompt_duracao
        )
        proposta_completa['duracao_meses'] = response.text.strip()
        
        prompt_orcamento = f'''
        Calcule or√ßamento REALISTA para projeto de inova√ß√£o:
        SOLU√á√ÉO: {dados_solucao['descricao_solucao'][:400]}
        DURA√á√ÉO: {proposta_completa['duracao_meses']} meses
        COMPLEXIDADE: Alta
        Retorne valores realistas no formato:
        TOTAL: [valor total]
        RH: [recursos humanos]
        MATERIAL_PERMANENTE: [equipamentos]
        MATERIAL_CONSUMO: [materiais]
        SERVICOS_TERCEIROS: [servi√ßos]
        VIAGENS: [viagens]
        OUTROS: [outros custos]
        COMUNICACAO: [comunica√ß√£o]
        STARTUPS: [parcerias]
        '''
        response = client.models.generate_content(
            model="gemini-2.5-flash",
            contents=prompt_orcamento
        )
        proposta_completa['orcamento'] = response.text
        
        proposta_completa['tecnologias'] = dados_solucao['tecnologias_previstas']
        proposta_completa['tipo_produto'] = dados_solucao['tipo_produto'][:255]
        
        prompt_alcance = f'''
        Determine alcance realista:
        SOLU√á√ÉO: {dados_solucao['descricao_solucao'][:400]}
        POTENCIAL: {dados_solucao.get('potencial_mercado', '')}
        Retorne uma das op√ß√µes:
        - Local - Na empresa/organiza√ß√£o
        - Nacional - No setor brasileiro
        - Internacional - No setor mundial
        - Diversificado - Abrang√™ncia em mais de um setor
        '''
        response = client.models.generate_content(
            model="gemini-2.5-flash",
            contents=prompt_alcance
        )
        proposta_completa['alcance'] = response.text.strip()
        
        proposta_completa['trl'] = f"TRL_INICIAL: {dados_solucao['trl_inicial']}\nTRL_FINAL: {dados_solucao['trl_final']}"
        proposta_completa['propriedade_intelectual'] = dados_solucao['propriedade_intelectual'][:1000]
        proposta_completa['aspectos_inovativos'] = dados_solucao['aspectos_inovativos'][:1000]
        
        prompt_ambito = f'''
        Descreva o √¢mbito de aplica√ß√£o detalhado:
        SOLU√á√ÉO: {dados_solucao['descricao_solucao'][:500]}
        TECNOLOGIAS: {dados_solucao['tecnologias_previstas']}
        POTENCIAL: {dados_solucao.get('potencial_mercado', '')}
        Inclua setores beneficiados, usu√°rios potenciais e impactos esperados.
        '''
        response = client.models.generate_content(
            model="gemini-2.5-flash",
            contents=prompt_ambito
        )
        proposta_completa['ambito_aplicacao'] = response.text
        
        return proposta_completa, dados_solucao

    # Fun√ß√£o para gerar proposta manual
    def gerar_proposta_manual(desafio_edital, dados_solucao):
        proposta_completa = {}
        
        prompt_titulo = f'''
        Crie um T√çTULO (m√°x 200 caracteres):
        DESAFIO: {desafio_edital}
        SOLU√á√ÉO: {dados_solucao['descricao_solucao']}
        Retorne APENAS o t√≠tulo.
        '''
        response = client.models.generate_content(
            model="gemini-2.5-flash",
            contents=prompt_titulo
        )
        proposta_completa['titulo'] = response.text.strip()[:200]
        
        proposta_completa.update({
            'desafio_info': f"C√ìDIGO: EDITAL-2024-001\nNOME: {desafio_edital[:50]}...",
            'duracao_meses': "18",
            'orcamento': "TOTAL: 1200000\nRH: 600000\nMATERIAL_PERMANENTE: 300000\nMATERIAL_CONSUMO: 100000\nSERVICOS_TERCEIROS: 150000\nVIAGENS: 30000\nOUTROS: 15000\nCOMUNICACAO: 20000\nSTARTUPS: 0",
            'tecnologias': dados_solucao.get('tecnologias_previstas', 'Tecnologias a definir'),
            'tipo_produto': dados_solucao.get('tipo_produto', 'Sistema integrado')[:255],
            'alcance': "Nacional - No setor brasileiro",
            'trl': f"TRL_INICIAL: {dados_solucao.get('trl_inicial', 'TRL4')}\nTRL_FINAL: {dados_solucao.get('trl_final', 'TRL7')}",
            'propriedade_intelectual': dados_solucao.get('propriedade_intelectual', 'Potencial para registro de patente')[:1000],
            'aspectos_inovativos': dados_solucao.get('aspectos_inovativos', 'Solu√ß√£o inovadora')[:1000],
            'ambito_aplicacao': dados_solucao.get('descricao_solucao', 'Aplica√ß√£o em m√∫ltiplos setores')
        })
        
        return proposta_completa

    # Fun√ß√£o para salvar no MongoDB
    def salvar_no_mongo(proposta_completa, desafio_edital, tipo="autom√°tica"):
        if mongo_connected:
            documento = {
                "id": str(uuid.uuid4()),
                "titulo": proposta_completa.get('titulo', ''),
                "desafio": desafio_edital[:500],
                "proposta_completa": proposta_completa,
                "tipo_geracao": tipo,
                "data_criacao": datetime.now()
            }
            collection.insert_one(documento)
            return True
        return False

    # Abas principais
    tab1, tab2, tab3, tab4 = st.tabs(["üîç Busca Web Editais", "üéØ Editais por Solu√ß√£o", "ü§ñ Gerar Automaticamente", "üìù Formul√°rio Manual"])

    with tab1:
        st.header("üîç Busca por Editais Abertos")
        st.markdown("Busque editais ativos em todo o mundo usando Web Search")
        
        with st.form("form_busca_web"):
            col1, col2 = st.columns(2)
            
            with col1:
                palavras_chave_web = st.text_input(
                    "Palavras-chave principais:",
                    placeholder="IA, energia sustent√°vel, IoT, smart grid...",
                    value="editais abertos inova√ß√£o tecnologia P&D"
                )
                
                area_interesse = st.selectbox(
                    "√Årea de Interesse:",
                    [
                        "Energia e Utilities", "Tecnologia da Informa√ß√£o", "Sa√∫de", 
                        "Agricultura", "Mobilidade", "Meio Ambiente", "Ind√∫stria 4.0",
                        "Cidades Inteligentes", "Educa√ß√£o", "Finan√ßas", "Outra"
                    ]
                )
            
            with col2:
                tipo_edital = st.selectbox(
                    "Tipo de Edital:",
                    [
                        "P&D e Inova√ß√£o", "Startups e Scale-ups", "Projetos Tecnol√≥gicos",
                        "Pesquisa Cient√≠fica", "Desenvolvimento Sustent√°vel", 
                        "Digital Transformation", "Todos os tipos"
                    ]
                )
                
                st.markdown("**Configura√ß√µes de Busca:**")
                buscar_internacional = st.checkbox("Incluir editais internacionais", value=True)
                apenas_abertos = st.checkbox("Apenas editais com prazos abertos", value=True)
            
            submitted_web = st.form_submit_button("üåê Buscar Editais na Web", type="primary")
        
        if submitted_web and gemini_api_key:
            with st.spinner("üîç Buscando editais abertos na web..."):
                # Adicionar filtros √† busca
                filtros = ""
                if apenas_abertos:
                    filtros += " com prazos em aberto"
                if buscar_internacional:
                    filtros += " incluindo oportunidades internacionais"
                
                resultado_busca = buscar_editais_abertos_web(
                    palavras_chave_web, 
                    area_interesse, 
                    tipo_edital + filtros
                )
                
                st.success("‚úÖ Busca web conclu√≠da!")
                st.subheader("üìã Editais Abertos Encontrados")
                st.markdown(resultado_busca)
                
                # Estat√≠sticas r√°pidas
                if "edital" in resultado_busca.lower():
                    st.sidebar.success("üéØ Editais encontrados com sucesso!")
                else:
                    st.sidebar.warning("‚ö†Ô∏è Tente ajustar os termos de busca")

    with tab2:
        st.header("üéØ Buscar Editais por Solu√ß√£o")
        st.markdown("Encontre editais espec√≠ficos para sua solu√ß√£o")
        
        with st.form("form_busca_especifica"):
            col1, col2 = st.columns(2)
            
            with col1:
                nome_solucao = st.text_input("Nome da Solu√ß√£o:", placeholder="Sistema de monitoramento inteligente")
                area_solucao = st.selectbox("√Årea de Aplica√ß√£o:", [
                    "Energia", "Tecnologia", "Sa√∫de", "Educa√ß√£o", "Agricultura", 
                    "Mobilidade", "Meio Ambiente", "Ind√∫stria", "Outra"
                ])
                problema_resolve = st.text_area("Problema que Resolve:", placeholder="Descreva o problema abordado")
            
            with col2:
                como_funciona = st.text_area("Como Funciona:", placeholder="Explique o funcionamento")
                inovacao_solucao = st.text_area("Elementos Inovadores:", placeholder="Aspectos inovadores")
                beneficios = st.text_area("Benef√≠cios Esperados:", placeholder="Impactos e benef√≠cios")
            
            palavras_chave_busca = st.text_input("Palavras-chave:", "inova√ß√£o, tecnologia, IA, sustentabilidade")
            
            submitted_busca = st.form_submit_button("üéØ Buscar Editais Espec√≠ficos", type="primary")
        
        if submitted_busca and gemini_api_key:
            with st.spinner("Buscando editais para sua solu√ß√£o..."):
                descricao_completa = f"""
                NOME: {nome_solucao}
                √ÅREA: {area_solucao}
                PROBLEMA: {problema_resolve}
                FUNCIONAMENTO: {como_funciona}
                INOVA√á√ÉO: {inovacao_solucao}
                BENEF√çCIOS: {beneficios}
                """
                
                resultado_busca = buscar_editais_especificos(
                    descricao_completa, 
                    palavras_chave_busca, 
                    area_solucao, 
                    inovacao_solucao
                )
                
                st.success("‚úÖ Busca conclu√≠da!")
                st.subheader("üìã Editais Recomendados")
                st.markdown(resultado_busca)

    with tab3:
        st.header("ü§ñ Gerar Proposta Automaticamente")
        st.markdown("**Cole o desafio do edital e gere uma proposta completa automaticamente**")
        
        with st.form("form_auto"):
            desafio_edital = st.text_area(
                "Desafio do Edital:",
                height=200,
                placeholder="Cole aqui o texto completo do desafio do edital...\n\nExemplo: Desenvolvimento de sistema de monitoramento preditivo para infraestrutura cr√≠tica utilizando intelig√™ncia artificial e IoT..."
            )
            
            submitted_auto = st.form_submit_button("üöÄ Gerar Proposta Autom√°tica", type="primary")
        
        if submitted_auto and gemini_api_key:
            if not desafio_edital.strip():
                st.error("Por favor, cole o desafio do edital.")
                st.stop()
            
            with st.spinner("ü§ñ Analisando desafio e gerando solu√ß√£o inovadora..."):
                proposta_completa, dados_solucao = gerar_proposta_automatica(desafio_edital)
                
                st.success("‚úÖ Proposta gerada automaticamente!")
                
                # Exibir resumo
                st.subheader("üí° Solu√ß√£o Proposta")
                st.info(f"**T√≠tulo:** {proposta_completa.get('titulo', '')}")
                st.write(f"**Descri√ß√£o:** {dados_solucao.get('descricao_solucao', '')}")
                
                # Exibir proposta completa
                st.subheader("üìã Proposta Completa")
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.metric("T√≠tulo", proposta_completa.get('titulo', ''))
                    st.metric("Dura√ß√£o", f"{proposta_completa.get('duracao_meses', '')} meses")
                    st.metric("Alcance", proposta_completa.get('alcance', ''))
                
                with col2:
                    st.metric("TRL Inicial", proposta_completa.get('trl', '').split('\n')[0].replace('TRL_INICIAL: ', ''))
                    st.metric("TRL Final", proposta_completa.get('trl', '').split('\n')[1].replace('TRL_FINAL: ', ''))
                    st.metric("Tipo de Produto", proposta_completa.get('tipo_produto', ''))
                
                # Tecnologias e Inova√ß√£o
                st.subheader("üîß Tecnologias e Inova√ß√£o")
                col3, col4 = st.columns(2)
                
                with col3:
                    st.write("**Tecnologias Utilizadas:**")
                    st.write(proposta_completa.get('tecnologias', ''))
                
                with col4:
                    st.write("**Aspectos Inovativos:**")
                    st.write(proposta_completa.get('aspectos_inovativos', ''))
                
                # Or√ßamento
                st.subheader("üí∞ Or√ßamento Detalhado")
                orcamento_texto = proposta_completa.get('orcamento', '')
                linhas_orcamento = orcamento_texto.split('\n')
                for linha in linhas_orcamento:
                    if ':' in linha:
                        chave, valor = linha.split(':', 1)
                        st.metric(label=chave.strip(), value=f"R$ {valor.strip()}")
                
                # Download
                proposta_completa_texto = f"""
                PROPOSTA PARA EDITAL - GERADA AUTOMATICAMENTE
                ============================================
                
                T√çTULO: {proposta_completa.get('titulo', '')}
                
                DESAFIO: {desafio_edital[:1000]}
                
                SOLU√á√ÉO: {dados_solucao.get('descricao_solucao', '')}
                
                INFORMA√á√ïES:
                - Dura√ß√£o: {proposta_completa.get('duracao_meses', '')} meses
                - Alcance: {proposta_completa.get('alcance', '')}
                - TRL: {proposta_completa.get('trl', '')}
                
                OR√áAMENTO:
                {proposta_completa.get('orcamento', '')}
                
                TECNOLOGIAS: {proposta_completa.get('tecnologias', '')}
                INOVA√á√ÉO: {proposta_completa.get('aspectos_inovativos', '')}
                
                √ÇMBITO DE APLICA√á√ÉO:
                {proposta_completa.get('ambito_aplicacao', '')}
                """
                
                st.download_button(
                    label="üì• Download da Proposta",
                    data=proposta_completa_texto,
                    file_name=f"proposta_edital_auto_{datetime.now().strftime('%Y%m%d_%H%M')}.txt",
                    mime="text/plain"
                )
                
                if salvar_no_mongo(proposta_completa, desafio_edital, "autom√°tica"):
                    st.sidebar.success("‚úÖ Proposta salva!")

    with tab4:
        st.header("üìù Formul√°rio Manual")
        st.markdown("Preencha os dados para gerar uma proposta personalizada")
        
        with st.form("form_manual"):
            st.subheader("Desafio do Edital")
            desafio_edital = st.text_area(
                "Desafio espec√≠fico:",
                height=150,
                placeholder="Cole o desafio do edital..."
            )
            
            st.subheader("Solu√ß√£o Proposta")
            col1, col2 = st.columns(2)
            
            with col1:
                descricao_solucao = st.text_area(
                    "Descri√ß√£o da solu√ß√£o:",
                    height=120,
                    placeholder="Descreva sua solu√ß√£o..."
                )
                
                aspectos_inovativos = st.text_area(
                    "Aspectos inovativos:",
                    height=100,
                    placeholder="O que tem de inovador..."
                )
                
                tecnologias_previstas = st.text_area(
                    "Tecnologias:",
                    height=80,
                    placeholder="Tecnologias utilizadas..."
                )
            
            with col2:
                tipo_produto = st.text_input(
                    "Tipo de produto:",
                    placeholder="Software, hardware, sistema..."
                )
                
                trl_inicial = st.selectbox(
                    "TRL Inicial:",
                    ["TRL1", "TRL2", "TRL3", "TRL4", "TRL5", "TRL6", "TRL7", "TRL8", "TRL9"],
                    index=3
                )
                
                trl_final = st.selectbox(
                    "TRL Final:",
                    ["TRL1", "TRL2", "TRL3", "TRL4", "TRL5", "TRL6", "TRL7", "TRL8", "TRL9"],
                    index=6
                )
            
            submitted_manual = st.form_submit_button("üìù Gerar Proposta Manual", type="primary")
        
        if submitted_manual and gemini_api_key:
            if not desafio_edital.strip():
                st.error("Por favor, insira o desafio do edital.")
                st.stop()
            
            dados_solucao = {
                'descricao_solucao': descricao_solucao,
                'aspectos_inovativos': aspectos_inovativos,
                'tecnologias_previstas': tecnologias_previstas,
                'tipo_produto': tipo_produto,
                'trl_inicial': trl_inicial,
                'trl_final': trl_final,
                'propriedade_intelectual': "A ser definido conforme desenvolvimento"
            }
            
            with st.spinner("Gerando proposta manual..."):
                proposta_completa = gerar_proposta_manual(desafio_edital, dados_solucao)
                
                st.success("‚úÖ Proposta manual gerada!")
                
                # Exibir resultados
                st.subheader("üìã Proposta Gerada")
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.info(f"**T√≠tulo:** {proposta_completa.get('titulo', '')}")
                    st.info(f"**Dura√ß√£o:** {proposta_completa.get('duracao_meses', '')} meses")
                    st.info(f"**Alcance:** {proposta_completa.get('alcance', '')}")
                
                with col2:
                    st.info(f"**TRL:** {proposta_completa.get('trl', '')}")
                    st.info(f"**Produto:** {proposta_completa.get('tipo_produto', '')}")
                
                # Download
                proposta_texto = f"""
                PROPOSTA PARA EDITAL - FORMUL√ÅRIO MANUAL
                =======================================
                
                T√çTULO: {proposta_completa.get('titulo', '')}
                
                DESAFIO: {desafio_edital}
                
                SOLU√á√ÉO: {descricao_solucao}
                
                INFORMA√á√ïES:
                - Dura√ß√£o: {proposta_completa.get('duracao_meses', '')} meses
                - Alcance: {proposta_completa.get('alcance', '')}
                - TRL: {proposta_completa.get('trl', '')}
                - Produto: {proposta_completa.get('tipo_produto', '')}
                
                TECNOLOGIAS: {tecnologias_previstas}
                INOVA√á√ÉO: {aspectos_inovativos}
                """
                
                st.download_button(
                    label="üì• Download Proposta Manual",
                    data=proposta_texto,
                    file_name=f"proposta_edital_manual_{datetime.now().strftime('%Y%m%d_%H%M')}.txt",
                    mime="text/plain"
                )
                
                if salvar_no_mongo(proposta_completa, desafio_edital, "manual"):
                    st.sidebar.success("‚úÖ Proposta salva!")

elif not gemini_api_key:
    st.warning("‚ö†Ô∏è Por favor, insira uma API Key v√°lida do Gemini.")

else:
    st.info("üîë Para come√ßar, insira sua API Key do Gemini acima.")

# Rodap√©
st.divider()
st.caption("üöÄ Gerador de Propostas para Editais | Desenvolvido para inova√ß√£o e tecnologia")
