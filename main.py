import streamlit as st
from google import genai
from google.genai import types
import os
import uuid
from datetime import datetime
from pymongo import MongoClient
import tempfile
import PyPDF2
import docx
import re

# Configura√ß√£o da p√°gina
st.set_page_config(page_title="Gerador de Propostas para Editais", page_icon="üöÄ", layout="wide")

# T√≠tulo do aplicativo
st.title("üöÄ Gerador de Propostas para Editais de Solu√ß√£o Inovadora")
st.markdown("Descreva sua solu√ß√£o e encontre editais alinhados para submeter sua proposta")

# Configura√ß√£o do Gemini API
gemini_api_key = st.secrets.get("GEMINI_API_KEY", os.getenv("GEMINI_API_KEY"))
if not gemini_api_key:
    gemini_api_key = st.text_input("Digite sua API Key do Gemini:", type="password")

if gemini_api_key:
    client = genai.Client(api_key=gemini_api_key)
    
    # Conex√£o com MongoDB (opcional)
    try:
        mongodb_uri = st.secrets.get("MONGODB_URI", os.getenv("MONGODB_URI"))
        if mongodb_uri:
            client_mongo = MongoClient(mongodb_uri)
            db = client_mongo['propostas_editais']
            collection = db['propostas_geradas']
            mongo_connected = True
        else:
            mongo_connected = False
    except:
        mongo_connected = False
        st.warning("Conex√£o com MongoDB n√£o configurada. As propostas n√£o ser√£o salvas.")

    # Fun√ß√£o para extrair texto de arquivos
    def extract_text_from_file(uploaded_file):
        text = ""
        file_type = uploaded_file.type
        
        if file_type == "application/pdf":
            # Processar PDF
            with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmp_file:
                tmp_file.write(uploaded_file.getvalue())
                tmp_file_path = tmp_file.name
            
            try:
                with open(tmp_file_path, "rb") as file:
                    pdf_reader = PyPDF2.PdfReader(file)
                    for page in pdf_reader.pages:
                        text += page.extract_text() + "\n"
            except Exception as e:
                st.error(f"Erro ao ler PDF: {e}")
            finally:
                os.unlink(tmp_file_path)
                
        elif file_type == "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
            # Processar DOCX
            with tempfile.NamedTemporaryFile(delete=False, suffix=".docx") as tmp_file:
                tmp_file.write(uploaded_file.getvalue())
                tmp_file_path = tmp_file.name
            
            try:
                doc = docx.Document(tmp_file_path)
                for paragraph in doc.paragraphs:
                    text += paragraph.text + "\n"
            except Exception as e:
                st.error(f"Erro ao ler DOCX: {e}")
            finally:
                os.unlink(tmp_file_path)
                
        else:
            # Processar texto simples
            text = str(uploaded_file.getvalue(), "utf-8")
        
        return text

    # Fun√ß√£o para buscar editais usando Web Search
    def buscar_editais_com_web_search(descricao_solucao, palavras_chave, area_atuacao, inovacao):
        # Configurar a ferramenta de busca do Google
        grounding_tool = types.Tool(
            google_search=types.GoogleSearch()
        )
        
        config = types.GenerateContentConfig(
            tools=[grounding_tool],
            temperature=0.3
        )
        
        prompt = f'''
        Com base na seguinte solu√ß√£o inovadora, busque informa√ß√µes sobre editais ativos ou recentes que sejam adequados para esta proposta:

        DESCRI√á√ÉO DA SOLU√á√ÉO: {descricao_solucao}
        √ÅREA DE ATUA√á√ÉO: {area_atuacao}
        ELEMENTOS INOVADORES: {inovacao}
        PALAVRAS-CHAVE: {palavras_chave}

        Forne√ßa informa√ß√µes sobre:
        1. Editais ativos ou recentes que se alinhem com esta solu√ß√£o
        2. √ìrg√£os/governos/institui√ß√µes que financiam este tipo de solu√ß√£o
        3. Prazos e requisitos importantes
        4. Links e fontes para mais informa√ß√µes

        Seja espec√≠fico e pr√°tico, fornecendo informa√ß√µes atualizadas e relevantes.
        '''
        
        try:
            response = client.models.generate_content(
                model="gemini-2.0-flash",
                contents=prompt,
                config=config
            )
            
            # Extrair metadados de fundamenta√ß√£o se dispon√≠veis
            resultado = response.text
            
            if hasattr(response, 'candidates') and response.candidates:
                candidate = response.candidates[0]
                if hasattr(candidate, 'grounding_metadata'):
                    # Adicionar informa√ß√µes sobre as fontes
                    resultado += "\n\n---\n**FONTES E REFER√äNCIAS:**\n"
                    if hasattr(candidate.grounding_metadata, 'grounding_chunks'):
                        for i, chunk in enumerate(candidate.grounding_metadata.grounding_chunks[:5]):
                            if hasattr(chunk, 'web') and hasattr(chunk.web, 'uri'):
                                resultado += f"\n{i+1}. {chunk.web.uri}"
            
            return resultado
            
        except Exception as e:
            return f"Erro na busca: {str(e)}"

    # Fun√ß√£o para salvar no MongoDB
    def salvar_no_mongo(titulo, area_atuacao, palavras_chave, texto_edital, todas_etapas):
        if mongo_connected:
            documento = {
                "id": str(uuid.uuid4()),
                "titulo": titulo,
                "area_atuacao": area_atuacao,
                "palavras_chave": palavras_chave,
                "texto_edital": texto_edital[:1000] + "..." if len(texto_edital) > 1000 else texto_edital,
                "proposta_completa": todas_etapas,
                "data_criacao": datetime.now()
            }
            collection.insert_one(documento)
            return True
        return False

    # Fun√ß√µes para cada etapa da proposta
    def gerar_titulo_resumo(texto_edital, palavras_chave, diretrizes, area_atuacao, descricao_solucao):
        prompt = f'''
        Com base no edital fornecido e na solu√ß√£o do usu√°rio, gere um T√çTULO CRIATIVO e um RESUMO EXECUTIVO para uma proposta.

        TEXTO DO EDITAL:
        {texto_edital[:3000]}

        SOLU√á√ÉO DO USU√ÅRIO:
        {descricao_solucao}

        PALAVRAS-CHAVE: {palavras_chave}
        DIRETRIZES: {diretrizes}
        √ÅREA DE ATUA√á√ÉO: {area_atuacao}

        ESTRUTURE SUA RESPOSTA COM:
        T√çTULO: [T√≠tulo criativo e alinhado ao edital e √† solu√ß√£o]
        RESUMO EXECUTIVO: [Resumo de at√© 150 palavras explicando a solu√ß√£o proposta, seu diferencial inovador e benef√≠cios esperados]
        '''
        
        response = client.models.generate_content(
            model="gemini-1.5-flash",
            contents=prompt
        )
        return response.text

    def gerar_justificativa(texto_edital, palavras_chave, titulo_resumo, descricao_solucao, inovacao):
        prompt = f'''
        Com base no edital, no t√≠tulo/resumo fornecidos e na solu√ß√£o do usu√°rio, elabore uma JUSTIFICATIVA detalhada.

        TEXTO DO EDITAL:
        {texto_edital[:3000]}

        SOLU√á√ÉO DO USU√ÅRIO:
        {descricao_solucao}

        ELEMENTOS INOVADORES: {inovacao}
        PALAVRAS-CHAVE: {palavras_chave}
        T√çTULO E RESUMO DA PROPOSTA: {titulo_resumo}

        Forne√ßa uma justificativa t√©cnica convincente que destaque:
        1. O problema a ser resolvido e sua relev√¢ncia
        2. Por que a solu√ß√£o proposta √© inovadora
        3. Diferenciais em rela√ß√£o a solu√ß√µes existentes
        4. Alinhamento com as prioridades do edital
        '''
        
        response = client.models.generate_content(
            model="gemini-1.5-flash",
            contents=prompt
        )
        return response.text

    # ... (outras fun√ß√µes de gera√ß√£o mantidas como antes)

    # Interface do usu√°rio
    with st.sidebar:
        st.header("üìã Configura√ß√µes da Proposta")
        
        # Upload do edital
        uploaded_file = st.file_uploader("Fa√ßa upload do edital (PDF, DOCX ou TXT):", 
                                        type=["pdf", "docx", "txt"])
        
        area_atuacao = st.selectbox("√Årea de Atua√ß√£o Principal:", [
            "Tecnologia da Informa√ß√£o", "Sa√∫de", "Educa√ß√£o", "Agroneg√≥cio", 
            "Energia", "Meio Ambiente", "Mobilidade Urbana", "Ind√∫stria 4.0",
            "Seguran√ßa", "Turismo", "Outra"
        ])
        
        if area_atuacao == "Outra":
            area_atuacao = st.text_input("Especifique a √°rea de atua√ß√£o:")
        
        palavras_chave = st.text_area("Palavras-chave (separadas por v√≠rgula):", 
                                     "inova√ß√£o, tecnologia, sustentabilidade, efici√™ncia")
        
        diretrizes_usuario = st.text_area("Diretrizes ou Ideias Preliminares:", 
                                         "Ex: Focar em solu√ß√µes de IoT para monitoramento remoto. Incluir parceria com universidades. Considerar baixo custo de implementa√ß√£o.")
        
        st.divider()
        
        # Op√ß√£o para inserir texto manualmente
        texto_manual = st.text_area("Ou cole o texto do edital manualmente:", height=200)
        
        st.divider()
        gerar_proposta = st.button("üöÄ Gerar Proposta Completa", type="primary", use_container_width=True)

    # √Årea principal - Descri√ß√£o da Solu√ß√£o do Usu√°rio
    st.header("üí° Descreva Sua Solu√ß√£o Inovadora")
    
    with st.expander("Preencha os detalhes da sua solu√ß√£o", expanded=True):
        col1, col2 = st.columns(2)
        
        with col1:
            nome_solucao = st.text_input("Nome da Solu√ß√£o:", placeholder="Ex: Sistema IoT de Monitoramento Agr√≠cola")
            area_solucao = st.selectbox("√Årea de Aplica√ß√£o:", [
                "Agricultura", "Sa√∫de", "Educa√ß√£o", "Energia", "Meio Ambiente", 
                "Mobilidade", "Ind√∫stria", "Tecnologia", "Outra"
            ])
            problema_resolve = st.text_area("Problema que Resolve:", placeholder="Descreva o problema que sua solu√ß√£o aborda")
        
        with col2:
            como_funciona = st.text_area("Como Funciona:", placeholder="Explique brevemente como sua solu√ß√£o funciona")
            inovacao_solucao = st.text_area("O que tem de Inovador:", placeholder="Descreva os aspectos inovadores")
            beneficios = st.text_area("Benef√≠cios e Impactos:", placeholder="Quais benef√≠cios e impactos sua solu√ß√£o traz")
        
        # Bot√£o para buscar editais alinhados
        buscar_editais = st.button("üîç Buscar Editais Alinhados", type="secondary")

    # Processar busca de editais
    if buscar_editais and gemini_api_key:
        with st.spinner("Buscando editais alinhados com sua solu√ß√£o..."):
            descricao_completa = f"""
            NOME: {nome_solucao}
            √ÅREA: {area_solucao}
            PROBLEMA RESOLVIDO: {problema_resolve}
            COMO FUNCIONA: {como_funciona}
            INOVA√á√ÉO: {inovacao_solucao}
            BENEF√çCIOS: {beneficios}
            """
            
            resultado_busca = buscar_editais_com_web_search(
                descricao_completa, 
                palavras_chave, 
                area_solucao, 
                inovacao_solucao
            )
            
            st.success("‚úÖ Busca de editais conclu√≠da!")
            st.subheader("üìã Editais Encontrados")
            st.markdown(resultado_busca)

    # Restante do c√≥digo para gera√ß√£o da proposta (mantido como antes)
    if gerar_proposta and gemini_api_key:
        # Obter texto do edital
        texto_edital = ""
        
        if uploaded_file is not None:
            with st.spinner("Processando arquivo do edital..."):
                texto_edital = extract_text_from_file(uploaded_file)
                if not texto_edital.strip():
                    st.error("N√£o foi poss√≠vel extrair texto do arquivo. Tente outro formato ou use a op√ß√£o de texto manual.")
                    st.stop()
        elif texto_manual.strip():
            texto_edital = texto_manual
        else:
            st.error("Por favor, fa√ßa upload de um edital ou cole o texto manualmente.")
            st.stop()
        
        # Gerar proposta em etapas
        todas_etapas = {}
        
        with st.status("Gerando proposta passo a passo...", expanded=True) as status:
            # Preparar descri√ß√£o da solu√ß√£o do usu√°rio
            descricao_solucao = f"""
            NOME: {nome_solucao}
            √ÅREA: {area_solucao}
            PROBLEMA RESOLVIDO: {problema_resolve}
            COMO FUNCIONA: {como_funciona}
            INOVA√á√ÉO: {inovacao_solucao}
            BENEF√çCIOS: {beneficios}
            """
            
            # Etapa 1: T√≠tulo e Resumo
            st.write("üéØ Gerando t√≠tulo e resumo executivo...")
            titulo_resumo = gerar_titulo_resumo(texto_edital, palavras_chave, diretrizes_usuario, area_atuacao, descricao_solucao)
            todas_etapas['titulo_resumo'] = titulo_resumo
            
            # Extrair t√≠tulo para usar no nome do documento
            titulo_match = re.search(r'T√çTULO:\s*(.+)', titulo_resumo, re.IGNORECASE)
            titulo_proposta = titulo_match.group(1).strip() if titulo_match else f"Proposta para Edital de Inova√ß√£o em {area_atuacao}"
            
            # Etapa 2: Justificativa
            st.write("üìù Desenvolvendo justificativa e inova√ß√£o...")
            justificativa = gerar_justificativa(texto_edital, palavras_chave, titulo_resumo, descricao_solucao, inovacao_solucao)
            todas_etapas['justificativa'] = justificativa
            
            # ... (continuar com as outras etapas)
            
            status.update(label="Proposta completa gerada!", state="complete")
        
        # Montar e exibir proposta completa
        st.success("‚úÖ Proposta gerada com sucesso!")
        # ... (restante do c√≥digo de exibi√ß√£o)

elif not gemini_api_key:
    st.warning("‚ö†Ô∏è Por favor, insira uma API Key v√°lida do Gemini para gerar propostas.")

else:
    st.info("üîë Para come√ßar, insira sua API Key do Gemini na barra lateral.")

# Rodap√©
st.divider()
st.caption("üöÄ Gerador de Propostas para Editais - Desenvolvido para transformar ideias inovadoras em projetos concretos")
