import streamlit as st
from google import genai
import os
import uuid
from datetime import datetime
from pymongo import MongoClient
import tempfile
import PyPDF2
import docx
import re

# Configura√ß√£o da p√°gina
st.set_page_config(page_title="Gerador de Propostas para Editais", page_icon="üöÄ", layout="wide")

# T√≠tulo do aplicativo
st.title("üöÄ Gerador de Propostas para Editais de Solu√ß√£o Inovadora")
st.markdown("Transforme editais em propostas completas com planos de neg√≥cios, cronogramas e justificativas")

# Configura√ß√£o do Gemini API
gemini_api_key = st.secrets.get("GEMINI_API_KEY", os.getenv("GEMINI_API_KEY"))
if not gemini_api_key:
    gemini_api_key = st.text_input("Digite sua API Key do Gemini:", type="password")

if gemini_api_key:
    client = genai.Client(api_key=gemini_api_key)
    
    # Conex√£o com MongoDB (opcional)
    try:
        mongodb_uri = st.secrets.get("MONGODB_URI", os.getenv("MONGODB_URI"))
        if mongodb_uri:
            client_mongo = MongoClient(mongodb_uri)
            db = client_mongo['propostas_editais']
            collection = db['propostas_geradas']
            mongo_connected = True
        else:
            mongo_connected = False
    except:
        mongo_connected = False
        st.warning("Conex√£o com MongoDB n√£o configurada. As propostas n√£o ser√£o salvas.")

    # Fun√ß√£o para extrair texto de arquivos
    def extract_text_from_file(uploaded_file):
        text = ""
        file_type = uploaded_file.type
        
        if file_type == "application/pdf":
            # Processar PDF
            with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmp_file:
                tmp_file.write(uploaded_file.getvalue())
                tmp_file_path = tmp_file.name
            
            try:
                with open(tmp_file_path, "rb") as file:
                    pdf_reader = PyPDF2.PdfReader(file)
                    for page in pdf_reader.pages:
                        text += page.extract_text() + "\n"
            except Exception as e:
                st.error(f"Erro ao ler PDF: {e}")
            finally:
                os.unlink(tmp_file_path)
                
        elif file_type == "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
            # Processar DOCX
            with tempfile.NamedTemporaryFile(delete=False, suffix=".docx") as tmp_file:
                tmp_file.write(uploaded_file.getvalue())
                tmp_file_path = tmp_file.name
            
            try:
                doc = docx.Document(tmp_file_path)
                for paragraph in doc.paragraphs:
                    text += paragraph.text + "\n"
            except Exception as e:
                st.error(f"Erro ao ler DOCX: {e}")
            finally:
                os.unlink(tmp_file_path)
                
        else:
            # Processar texto simples
            text = str(uploaded_file.getvalue(), "utf-8")
        
        return text

    # Fun√ß√£o para salvar no MongoDB
    def salvar_no_mongo(titulo, area_atuacao, palavras_chave, texto_edital, todas_etapas):
        if mongo_connected:
            documento = {
                "id": str(uuid.uuid4()),
                "titulo": titulo,
                "area_atuacao": area_atuacao,
                "palavras_chave": palavras_chave,
                "texto_edital": texto_edital[:1000] + "..." if len(texto_edital) > 1000 else texto_edital,
                "proposta_completa": todas_etapas,
                "data_criacao": datetime.now()
            }
            collection.insert_one(documento)
            return True
        return False

    # Fun√ß√µes para cada etapa da proposta
    def gerar_titulo_resumo(texto_edital, palavras_chave, diretrizes, area_atuacao):
        prompt = f'''
        Com base no edital fornecido, gere um T√çTULO CRIATIVO e um RESUMO EXECUTIVO para uma proposta de solu√ß√£o inovadora.

        TEXTO DO EDITAL:
        {texto_edital[:3000]}  # Limitando o tamanho para n√£o exceder tokens

        PALAVRAS-CHAVE: {palavras_chave}
        DIRETRIZES: {diretrizes}
        √ÅREA DE ATUA√á√ÉO: {area_atuacao}

        ESTRUTURE SUA RESPOSTA COM:
        T√çTULO: [T√≠tulo criativo e alinhado ao edital]
        RESUMO EXECUTIVO: [Resumo de at√© 150 palavras explicando a solu√ß√£o proposta, seu diferencial inovador e benef√≠cios esperados]
        '''
        
        response = client.models.generate_content(
            model="gemini-1.5-flash",
            contents=prompt
        )
        return response.text

    def gerar_justificativa(texto_edital, palavras_chave, titulo_resumo):
        prompt = f'''
        Com base no edital e no t√≠tulo/resumo fornecidos, elabore uma JUSTIFICATIVA detalhada que explique:

        1. O problema a ser resolvido e sua relev√¢ncia
        2. Por que a solu√ß√£o proposta √© inovadora
        3. Diferenciais em rela√ß√£o a solu√ß√µes existentes
        4. Alinhamento com as prioridades do edital

        TEXTO DO EDITAL:
        {texto_edital[:3000]}

        PALAVRAS-CHAVE: {palavras_chave}
        T√çTULO E RESUMO DA PROPOSTA: {titulo_resumo}

        Forne√ßa uma justificativa t√©cnica convincente com argumentos s√≥lidos.
        '''
        
        response = client.models.generate_content(
            model="gemini-1.5-flash",
            contents=prompt
        )
        return response.text

    def gerar_objetivos_metodologia(texto_edital, palavras_chave, conteudo_anterior):
        prompt = f'''
        Com base no edital e no conte√∫do j√° desenvolvido, elabore os OBJETIVOS e a METODOLOGIA da proposta:

        OBJETIVOS:
        - Objetivo geral [1 objetivo principal]
        - Objetivos espec√≠ficos [3-5 objetivos mensur√°veis]

        METODOLOGIA:
        - Descri√ß√£o detalhada da solu√ß√£o proposta
        - M√©todos, t√©cnicas e abordagens
        - Fluxo de desenvolvimento e implementa√ß√£o

        TEXTO DO EDITAL:
        {texto_edital[:3000]}

        PALAVRAS-CHAVE: {palavras_chave}
        CONTE√öDO J√Å DESENVOLVIDO: {conteudo_anterior}

        Forne√ßa objetivos claros e uma metodologia bem estruturada.
        '''
        
        response = client.models.generate_content(
            model="gemini-1.5-flash",
            contents=prompt
        )
        return response.text

    def gerar_cronograma(texto_edital, palavras_chave, conteudo_anterior):
        prompt = f'''
        Com base no edital e no conte√∫do j√° desenvolvido, elabore um CRONOGRAMA DE IMPLEMENTA√á√ÉO detalhado:

        ESTRUTURE O CRONOGRAMA EM FASES:
        1. Pr√©-implanta√ß√£o (prepara√ß√£o, planejamento)
        2. Implanta√ß√£o (desenvolvimento, execu√ß√£o)
        3. P√≥s-implanta√ß√£o (testes, ajustes, opera√ß√£o)

        Para cada fase, inclua:
        - Atividades principais
        - Marcos e entreg√°veis
        - Dura√ß√£o estimada (semanas/meses)

        TEXTO DO EDITAL:
        {texto_edital[:3000]}

        PALAVRAS-CHAVE: {palavras_chave}
        CONTE√öDO J√Å DESENVOLVIDO: {conteudo_anterior}

        Forne√ßa um cronograma realista e bem estruturado.
        '''
        
        response = client.models.generate_content(
            model="gemini-1.5-flash",
            contents=prompt
        )
        return response.text

    def gerar_plano_negocios(texto_edital, palavras_chave, conteudo_anterior):
        prompt = f'''
        Com base no edital e no conte√∫do j√° desenvolvido, elabore um PLANO DE NEG√ìCIOS:

        ESTRUTURE O PLANO DE NEG√ìCIOS COM:
        1. Modelo de neg√≥cio proposto
        2. An√°lise de mercado e concorr√™ncia
        3. Proje√ß√£o financeira (investimento, custos, receitas)
        4. Estrat√©gia de sustentabilidade

        TEXTO DO EDITAL:
        {texto_edital[:3000]}

        PALAVRAS-CHAVE: {palavras_chave}
        CONTE√öDO J√Å DESENVOLVIDO: {conteudo_anterior}

        Forne√ßa um plano de neg√≥cios realista e bem fundamentado.
        '''
        
        response = client.models.generate_content(
            model="gemini-1.5-flash",
            contents=prompt
        )
        return response.text

    def gerar_recursos_impactos(texto_edital, palavras_chave, conteudo_anterior):
        prompt = f'''
        Com base no edital e no conte√∫do j√° desenvolvido, elabore a se√ß√£o de RECURSOS NECESS√ÅRIOS e IMPACTOS ESPERADOS:

        RECURSOS NECESS√ÅRIOS:
        - Recursos humanos (equipe, compet√™ncias)
        - Infraestrutura e equipamentos
        - Tecnologias e ferramentas
        - Parcerias estrat√©gicas

        IMPACTOS ESPERADOS:
        - Impactos t√©cnicos, econ√¥micos e sociais
        - Benef√≠cios para os stakeholders
        - Potencial de escalabilidade e replicabilidade

        TEXTO DO EDITAL:
        {texto_edital[:3000]}

        PALAVRAS-CHAVE: {palavras_chave}
        CONTE√öDO J√Å DESENVOLVIDO: {conteudo_anterior}

        Forne√ßa uma descri√ß√£o completa dos recursos necess√°rios e impactos esperados.
        '''
        
        response = client.models.generate_content(
            model="gemini-1.5-flash",
            contents=prompt
        )
        return response.text

    def gerar_conclusao(texto_edital, palavras_chave, conteudo_anterior):
        prompt = f'''
        Com base no edital e no conte√∫do j√° desenvolvido, elabore uma CONCLUS√ÉO persuasiva:

        A conclus√£o deve:
        - Sintetizar os pontos principais da proposta
        - Reafirmar o potencial de sucesso e inova√ß√£o
        - Destacar os benef√≠cios e impactos esperados
        - Finalizar com uma chamada para a√ß√£o convincente

        TEXTO DO EDITAL:
        {texto_edital[:3000]}

        PALAVRAS-CHAVE: {palavras_chave}
        CONTE√öDO J√Å DESENVOLVIDO: {conteudo_anterior}

        Forne√ßa uma conclus√£o impactante e memor√°vel.
        '''
        
        response = client.models.generate_content(
            model="gemini-1.5-flash",
            contents=prompt
        )
        return response.text

    # Interface do usu√°rio
    with st.sidebar:
        st.header("üìã Configura√ß√µes da Proposta")
        
        # Upload do edital
        uploaded_file = st.file_uploader("Fa√ßa upload do edital (PDF, DOCX ou TXT):", 
                                        type=["pdf", "docx", "txt"])
        
        area_atuacao = st.selectbox("√Årea de Atua√ß√£o Principal:", [
            "Tecnologia da Informa√ß√£o", "Sa√∫de", "Educa√ß√£o", "Agroneg√≥cio", 
            "Energia", "Meio Ambiente", "Mobilidade Urbana", "Ind√∫stria 4.0",
            "Seguran√ßa", "Turismo", "Outra"
        ])
        
        if area_atuacao == "Outra":
            area_atuacao = st.text_input("Especifique a √°rea de atua√ß√£o:")
        
        palavras_chave = st.text_area("Palavras-chave (separadas por v√≠rgula):", 
                                     "inova√ß√£o, tecnologia, sustentabilidade, efici√™ncia")
        
        diretrizes_usuario = st.text_area("Diretrizes ou Ideias Preliminares:", 
                                         "Ex: Focar em solu√ß√µes de IoT para monitoramento remoto. Incluir parceria com universidades. Considerar baixo custo de implementa√ß√£o.")
        
        st.divider()
        
        # Op√ß√£o para inserir texto manualmente
        texto_manual = st.text_area("Ou cole o texto do edital manualmente:", height=200)
        
        st.divider()
        gerar_proposta = st.button("üöÄ Gerar Proposta Completa", type="primary", use_container_width=True)

    # √Årea principal
    if gerar_proposta and gemini_api_key:
        # Obter texto do edital
        texto_edital = ""
        
        if uploaded_file is not None:
            with st.spinner("Processando arquivo do edital..."):
                texto_edital = extract_text_from_file(uploaded_file)
                if not texto_edital.strip():
                    st.error("N√£o foi poss√≠vel extrair texto do arquivo. Tente outro formato ou use a op√ß√£o de texto manual.")
                    st.stop()
        elif texto_manual.strip():
            texto_edital = texto_manual
        else:
            st.error("Por favor, fa√ßa upload de um edital ou cole o texto manualmente.")
            st.stop()
        
        # Gerar proposta em etapas
        todas_etapas = {}
        
        with st.status("Gerando proposta passo a passo...", expanded=True) as status:
            # Etapa 1: T√≠tulo e Resumo
            st.write("üéØ Gerando t√≠tulo e resumo executivo...")
            titulo_resumo = gerar_titulo_resumo(texto_edital, palavras_chave, diretrizes_usuario, area_atuacao)
            todas_etapas['titulo_resumo'] = titulo_resumo
            
            # Extrair t√≠tulo para usar no nome do documento
            titulo_match = re.search(r'T√çTULO:\s*(.+)', titulo_resumo, re.IGNORECASE)
            titulo_proposta = titulo_match.group(1).strip() if titulo_match else f"Proposta para Edital de Inova√ß√£o em {area_atuacao}"
            
            # Etapa 2: Justificativa
            st.write("üìù Desenvolvendo justificativa e inova√ß√£o...")
            justificativa = gerar_justificativa(texto_edital, palavras_chave, titulo_resumo)
            todas_etapas['justificativa'] = justificativa
            
            # Etapa 3: Objetivos e Metodologia
            st.write("üéØ Definindo objetivos e metodologia...")
            conteudo_anterior = f"{titulo_resumo}\n\n{justificativa}"
            objetivos_metodologia = gerar_objetivos_metodologia(texto_edital, palavras_chave, conteudo_anterior)
            todas_etapas['objetivos_metodologia'] = objetivos_metodologia
            
            # Etapa 4: Cronograma
            st.write("üìÖ Elaborando cronograma de implementa√ß√£o...")
            conteudo_anterior = f"{conteudo_anterior}\n\n{objetivos_metodologia}"
            cronograma = gerar_cronograma(texto_edital, palavras_chave, conteudo_anterior)
            todas_etapas['cronograma'] = cronograma
            
            # Etapa 5: Plano de Neg√≥cios
            st.write("üíº Desenvolvendo plano de neg√≥cios...")
            conteudo_anterior = f"{conteudo_anterior}\n\n{cronograma}"
            plano_negocios = gerar_plano_negocios(texto_edital, palavras_chave, conteudo_anterior)
            todas_etapas['plano_negocios'] = plano_negocios
            
            # Etapa 6: Recursos e Impactos
            st.write("üõ†Ô∏è Especificando recursos necess√°rios e impactos...")
            conteudo_anterior = f"{conteudo_anterior}\n\n{plano_negocios}"
            recursos_impactos = gerar_recursos_impactos(texto_edital, palavras_chave, conteudo_anterior)
            todas_etapas['recursos_impactos'] = recursos_impactos
            
            # Etapa 7: Conclus√£o
            st.write("üîö Finalizando com conclus√£o persuasiva...")
            conteudo_anterior = f"{conteudo_anterior}\n\n{recursos_impactos}"
            conclusao = gerar_conclusao(texto_edital, palavras_chave, conteudo_anterior)
            todas_etapas['conclusao'] = conclusao
            
            status.update(label="Proposta completa gerada!", state="complete")
        
        # Montar proposta completa
        proposta_completa = f"""
        {todas_etapas['titulo_resumo']}
        
        ## JUSTIFICATIVA E INOVA√á√ÉO
        {todas_etapas['justificativa']}
        
        ## OBJETIVOS E METODOLOGIA
        {todas_etapas['objetivos_metodologia']}
        
        ## CRONOGRAMA DE IMPLEMENTA√á√ÉO
        {todas_etapas['cronograma']}
        
        ## PLANO DE NEG√ìCIOS
        {todas_etapas['plano_negocios']}
        
        ## RECURSOS NECESS√ÅRIOS E IMPACTOS ESPERADOS
        {todas_etapas['recursos_impactos']}
        
        ## CONCLUS√ÉO
        {todas_etapas['conclusao']}
        """
        
        # Exibir resultados
        st.success("‚úÖ Proposta gerada com sucesso!")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üìä Metadados da Proposta")
            st.info(f"**T√≠tulo:** {titulo_proposta}")
            st.info(f"**√Årea de Atua√ß√£o:** {area_atuacao}")
            st.info(f"**Palavras-chave:** {palavras_chave}")
            
            # Bot√£o para copiar texto
            st.download_button(
                label="üì• Download da Proposta",
                data=proposta_completa,
                file_name=f"proposta_edital_{titulo_proposta.lower().replace(' ', '_')[:30]}.txt",
                mime="text/plain"
            )
        
        with col2:
            st.subheader("üéØ Diretrizes Aplicadas")
            st.success(f"**√Årea de Foco:** {area_atuacao}")
            st.success(f"**Palavras-chave:** {palavras_chave}")
            if diretrizes_usuario.strip():
                st.success(f"**Diretrizes:** {diretrizes_usuario}")
        
        st.divider()
        
        # Abas para visualizar cada se√ß√£o
        tabs = st.tabs(["T√≠tulo e Resumo", "Justificativa", "Objetivos e Metodologia", 
                       "Cronograma", "Plano de Neg√≥cios", "Recursos e Impactos", "Conclus√£o", "Proposta Completa"])
        
        with tabs[0]:
            st.markdown(todas_etapas['titulo_resumo'])
        with tabs[1]:
            st.markdown(todas_etapas['justificativa'])
        with tabs[2]:
            st.markdown(todas_etapas['objetivos_metodologia'])
        with tabs[3]:
            st.markdown(todas_etapas['cronograma'])
        with tabs[4]:
            st.markdown(todas_etapas['plano_negocios'])
        with tabs[5]:
            st.markdown(todas_etapas['recursos_impactos'])
        with tabs[6]:
            st.markdown(todas_etapas['conclusao'])
        with tabs[7]:
            st.markdown(proposta_completa)
        
        # Salvar no MongoDB se conectado
        if mongo_connected:
            if salvar_no_mongo(titulo_proposta, area_atuacao, palavras_chave, texto_edital, todas_etapas):
                st.sidebar.success("‚úÖ Proposta salva no banco de dados!")
    
    elif not gemini_api_key:
        st.warning("‚ö†Ô∏è Por favor, insira uma API Key v√°lida do Gemini para gerar propostas.")

else:
    st.info("üîë Para come√ßar, insira sua API Key do Gemini na barra lateral.")

# Rodap√©
st.divider()
st.caption("üöÄ Gerador de Propostas para Editais - Desenvolvido para transformar ideias inovadoras em projetos concretos")
